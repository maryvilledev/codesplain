// Configuration for each possible node type.
// Currently, the only option is 'collapse', which is used by the collapse transformer.

module.exports = {
    'primaryExpression': {},
    'genericSelection': {},
    'genericAssocList': {},
    'genericAssociation': {},
    'postfixExpression': {},
    'argumentExpressionList': {},
    'unaryExpression': {},
    'unaryOperator': {},
    'castExpression': {},
    'multiplicativeExpression': {},
    'additiveExpression': {},
    'shiftExpression': {},
    'relationalExpression': {},
    'equalityExpression': {},
    'andExpression': {},
    'exclusiveOrExpression': {},
    'inclusiveOrExpression': {},
    'logicalAndExpression': {},
    'logicalOrExpression': {},
    'conditionalExpression': {},
    'assignmentExpression': {},
    'assignmentOperator': {},
    'expression': {},
    'constantExpression': {},
    'declaration': {},
    'declarationSpecifiers': {},
    'declarationSpecifiers2': {},
    'declarationSpecifier': {},
    'initDeclaratorList': {},
    'initDeclarator': {},
    'storageClassSpecifier': {},
    'typeSpecifier': {},
    'structOrUnionSpecifier': {},
    'structOrUnion': {},
    'structDeclarationList': {},
    'structDeclaration': {},
    'specifierQualifierList': {},
    'structDeclaratorList': {},
    'structDeclarator': {},
    'enumSpecifier': {},
    'enumeratorList': {},
    'enumerator': {},
    'enumerationConstant': {},
    'atomicTypeSpecifier': {},
    'typeQualifier': {},
    'functionSpecifier': {},
    'alignmentSpecifier': {},
    'declarator': {},
    'directDeclarator': {},
    'gccDeclaratorExtension': {},
    'gccAttributeSpecifier': {},
    'gccAttributeList': {},
    'gccAttribute': {},
    'nestedParenthesesBlock': {},
    'pointer': {},
    'typeQualifierList': {},
    'parameterTypeList': {},
    'parameterList': {},
    'parameterDeclaration': {},
    'identifierList': {},
    'typeName': {},
    'abstractDeclarator': {},
    'directAbstractDeclarator': {},
    'typedefName': {},
    'initializer': {},
    'initializerList': {},
    'designation': {},
    'designatorList': {},
    'designator': {},
    'staticAssertDeclaration': {},
    'statement': {},
    'labeledStatement': {},
    'compoundStatement': {},
    'blockItemList': {},
    'blockItem': {},
    'expressionStatement': {},
    'selectionStatement': {},
    'iterationStatement': {},
    'jumpStatement': {},
    'compilationUnit': {},
    'translationUnit': {},
    'externalDeclaration': {},
    'functionDefinition': {},
    'declarationList': {},
    '._EPSILON': {},
    '._EOF': {},
    '._INVALID': {},
    '.Auto': {},
    '.Break': {},
    '.Case': {},
    '.Char': {},
    '.Const': {},
    '.Continue': {},
    '.Default': {},
    '.Do': {},
    '.Double': {},
    '.Else': {},
    '.Enum': {},
    '.Extern': {},
    '.Float': {},
    '.For': {},
    '.Goto': {},
    '.If': {},
    '.Inline': {},
    '.Int': {},
    '.Long': {},
    '.Register': {},
    '.Restrict': {},
    '.Return': {},
    '.Short': {},
    '.Signed': {},
    '.Sizeof': {},
    '.Static': {},
    '.Struct': {},
    '.Switch': {},
    '.Typedef': {},
    '.Union': {},
    '.Unsigned': {},
    '.Void': {},
    '.Volatile': {},
    '.While': {},
    '.Alignas': {},
    '.Alignof': {},
    '.Atomic': {},
    '.Bool': {},
    '.Complex': {},
    '.Generic': {},
    '.Imaginary': {},
    '.Noreturn': {},
    '.StaticAssert': {},
    '.ThreadLocal': {},
    '.LeftParen': {},
    '.RightParen': {},
    '.LeftBracket': {},
    '.RightBracket': {},
    '.LeftBrace': {},
    '.RightBrace': {},
    '.Less': {},
    '.LessEqual': {},
    '.Greater': {},
    '.GreaterEqual': {},
    '.LeftShift': {},
    '.RightShift': {},
    '.Plus': {},
    '.PlusPlus': {},
    '.Minus': {},
    '.MinusMinus': {},
    '.Star': {},
    '.Div': {},
    '.Mod': {},
    '.And': {},
    '.Or': {},
    '.AndAnd': {},
    '.OrOr': {},
    '.Caret': {},
    '.Not': {},
    '.Tilde': {},
    '.Question': {},
    '.Colon': {},
    '.Semi': {},
    '.Comma': {},
    '.Assign': {},
    '.StarAssign': {},
    '.DivAssign': {},
    '.ModAssign': {},
    '.PlusAssign': {},
    '.MinusAssign': {},
    '.LeftShiftAssign': {},
    '.RightShiftAssign': {},
    '.AndAssign': {},
    '.XorAssign': {},
    '.OrAssign': {},
    '.Equal': {},
    '.NotEqual': {},
    '.Arrow': {},
    '.Dot': {},
    '.Ellipsis': {},
    '.Identifier': {},
    '.Constant': {},
    '.StringLiteral': {},
    '.ComplexDefine': {},
    '.AsmBlock': {},
    '.LineAfterPreprocessing': {},
    '.LineDirective': {},
    '.PragmaDirective': {},
    '.Whitespace': {},
    '.Newline': {},
    '.BlockComment': {},
    '.LineComment': {},
};
