// Configuration for each possible node type.
// Currently, the only option is 'collapse', which is used by the collapse transformer.

module.exports = {
    'compilationUnit': {},
    'packageDeclaration': {},
    'importDeclaration': {},
    'typeDeclaration': {},
    'modifier': {},
    'classOrInterfaceModifier': {},
    'variableModifier': {},
    'classDeclaration': {},
    'typeParameters': {},
    'typeParameter': {},
    'typeBound': {},
    'enumDeclaration': {},
    'enumConstants': {},
    'enumConstant': {},
    'enumBodyDeclarations': {},
    'interfaceDeclaration': {},
    'typeList': {},
    'classBody': {},
    'interfaceBody': {},
    'classBodyDeclaration': {},
    'memberDeclaration': {},
    'methodDeclaration': {},
    'genericMethodDeclaration': {},
    'constructorDeclaration': {},
    'genericConstructorDeclaration': {},
    'fieldDeclaration': {},
    'interfaceBodyDeclaration': {},
    'interfaceMemberDeclaration': {},
    'constDeclaration': {},
    'constantDeclarator': {},
    'interfaceMethodDeclaration': {},
    'genericInterfaceMethodDeclaration': {},
    'variableDeclarators': {},
    'variableDeclarator': {},
    'variableDeclaratorId': {},
    'variableInitializer': {},
    'arrayInitializer': {},
    'enumConstantName': {},
    'typeType': {},
    'classOrInterfaceType': {},
    'primitiveType': {},
    'typeArguments': {},
    'typeArgument': {},
    'qualifiedNameList': {},
    'formalParameters': {},
    'formalParameterList': {},
    'formalParameter': {},
    'lastFormalParameter': {},
    'methodBody': {},
    'constructorBody': {},
    'qualifiedName': {},
    'literal': {},
    'annotation': {},
    'annotationName': {},
    'elementValuePairs': {},
    'elementValuePair': {},
    'elementValue': {},
    'elementValueArrayInitializer': {},
    'annotationTypeDeclaration': {},
    'annotationTypeBody': {},
    'annotationTypeElementDeclaration': {},
    'annotationTypeElementRest': {},
    'annotationMethodOrConstantRest': {},
    'annotationMethodRest': {},
    'annotationConstantRest': {},
    'defaultValue': {},
    'block': {},
    'blockStatement': {},
    'localVariableDeclarationStatement': {},
    'localVariableDeclaration': {},
    'statement': {},
    'catchClause': {},
    'catchType': {},
    'finallyBlock': {},
    'resourceSpecification': {},
    'resources': {},
    'resource': {},
    'switchBlockStatementGroup': {},
    'switchLabel': {},
    'forControl': {},
    'forInit': {},
    'enhancedForControl': {},
    'forUpdate': {},
    'parExpression': {},
    'expressionList': {},
    'statementExpression': {},
    'constantExpression': {},
    'expression': {},
    'primary': {},
    'creator': {},
    'createdName': {},
    'innerCreator': {},
    'arrayCreatorRest': {},
    'classCreatorRest': {},
    'explicitGenericInvocation': {},
    'nonWildcardTypeArguments': {},
    'typeArgumentsOrDiamond': {},
    'nonWildcardTypeArgumentsOrDiamond': {},
    'superSuffix': {},
    'explicitGenericInvocationSuffix': {},
    'arguments': {},
    '._EPSILON': {},
    '._EOF': {},
    '._INVALID': {},
    '.ABSTRACT': {},
    '.ASSERT': {},
    '.BOOLEAN': {},
    '.BREAK': {},
    '.BYTE': {},
    '.CASE': {},
    '.CATCH': {},
    '.CHAR': {},
    '.CLASS': {},
    '.CONST': {},
    '.CONTINUE': {},
    '.DEFAULT': {},
    '.DO': {},
    '.DOUBLE': {},
    '.ELSE': {},
    '.ENUM': {},
    '.EXTENDS': {},
    '.FINAL': {},
    '.FINALLY': {},
    '.FLOAT': {},
    '.FOR': {},
    '.IF': {},
    '.GOTO': {},
    '.IMPLEMENTS': {},
    '.IMPORT': {},
    '.INSTANCEOF': {},
    '.INT': {},
    '.INTERFACE': {},
    '.LONG': {},
    '.NATIVE': {},
    '.NEW': {},
    '.PACKAGE': {},
    '.PRIVATE': {},
    '.PROTECTED': {},
    '.PUBLIC': {},
    '.RETURN': {},
    '.SHORT': {},
    '.STATIC': {},
    '.STRICTFP': {},
    '.SUPER': {},
    '.SWITCH': {},
    '.SYNCHRONIZED': {},
    '.THIS': {},
    '.THROW': {},
    '.THROWS': {},
    '.TRANSIENT': {},
    '.TRY': {},
    '.VOID': {},
    '.VOLATILE': {},
    '.WHILE': {},
    '.IntegerLiteral': {},
    '.FloatingPointLiteral': {},
    '.BooleanLiteral': {},
    '.CharacterLiteral': {},
    '.StringLiteral': {},
    '.NullLiteral': {},
    '.LPAREN': {},
    '.RPAREN': {},
    '.LBRACE': {},
    '.RBRACE': {},
    '.LBRACK': {},
    '.RBRACK': {},
    '.SEMI': {},
    '.COMMA': {},
    '.DOT': {},
    '.ASSIGN': {},
    '.GT': {},
    '.LT': {},
    '.BANG': {},
    '.TILDE': {},
    '.QUESTION': {},
    '.COLON': {},
    '.EQUAL': {},
    '.LE': {},
    '.GE': {},
    '.NOTEQUAL': {},
    '.AND': {},
    '.OR': {},
    '.INC': {},
    '.DEC': {},
    '.ADD': {},
    '.SUB': {},
    '.MUL': {},
    '.DIV': {},
    '.BITAND': {},
    '.BITOR': {},
    '.CARET': {},
    '.MOD': {},
    '.ADD_ASSIGN': {},
    '.SUB_ASSIGN': {},
    '.MUL_ASSIGN': {},
    '.DIV_ASSIGN': {},
    '.AND_ASSIGN': {},
    '.OR_ASSIGN': {},
    '.XOR_ASSIGN': {},
    '.MOD_ASSIGN': {},
    '.LSHIFT_ASSIGN': {},
    '.RSHIFT_ASSIGN': {},
    '.URSHIFT_ASSIGN': {},
    '.Identifier': {},
    '.AT': {},
    '.ELLIPSIS': {},
    '.WS': {},
    '.COMMENT': {},
    '.LINE_COMMENT': {},
};
